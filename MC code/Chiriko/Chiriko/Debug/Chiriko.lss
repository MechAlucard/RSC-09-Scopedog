
Chiriko.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000003c8  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006f  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b8  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ac  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000744  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020a  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017a  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e5       	ldi	r30, 0x54	; 84
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  b2:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CameraAxisInit>:
static unsigned int tilt_pos;
static unsigned int pan_pos;
int CameraAxisInit()
{
	//set PORTD to inputs with no pullups
	PORTD = 0x00;
  ba:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0x00;
  bc:	1a b8       	out	0x0a, r1	; 10
	//set PORTC[0:2] to outputs and initialize to zero
	DDRC = 0xff; //(1<<DDRC0)|(1<<DDRC1)|(1<<DDRC7);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;//(0<<PAN_BIT)|(0<<TILT_BIT)|(0<<PORTC2);
  c2:	18 b8       	out	0x08, r1	; 8
	tilt_pos = MID_TILT;
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	90 93 01 01 	sts	0x0101, r25
  cc:	80 93 00 01 	sts	0x0100, r24
	pan_pos = MID_PAN;//650;
  d0:	86 e3       	ldi	r24, 0x36	; 54
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	90 93 03 01 	sts	0x0103, r25
  d8:	80 93 02 01 	sts	0x0102, r24
	return 0;
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <TiltInc>:
//Description:	increases the tilt PW by 1us up to 2ms
//Return:		error code of 0 for no error, -1 for limit reached
int TiltInc()
{
	int ret = 0;
	if(tilt_pos >= MAX_TILT)
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	90 91 01 01 	lds	r25, 0x0101
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	80 39       	cpi	r24, 0x90	; 144
  ee:	92 07       	cpc	r25, r18
  f0:	40 f4       	brcc	.+16     	; 0x102 <TiltInc+0x20>
		ret = -1;
	else
		tilt_pos++;
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25
  f8:	80 93 00 01 	sts	0x0100, r24

//Description:	increases the tilt PW by 1us up to 2ms
//Return:		error code of 0 for no error, -1 for limit reached
int TiltInc()
{
	int ret = 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
	if(tilt_pos >= MAX_TILT)
		ret = -1;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	9f ef       	ldi	r25, 0xFF	; 255
	else
		tilt_pos++;
	return ret;
}
 106:	08 95       	ret

00000108 <TiltDec>:
//Description:	decreases the tilt PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int TiltDec()
{
	int ret = 0;
	if(tilt_pos <= MIN_TILT)
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	80 3c       	cpi	r24, 0xC0	; 192
 112:	91 05       	cpc	r25, r1
 114:	40 f0       	brcs	.+16     	; 0x126 <TiltDec+0x1e>
		ret = -1;
	else
		tilt_pos--;
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	80 93 00 01 	sts	0x0100, r24

//Description:	decreases the tilt PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int TiltDec()
{
	int ret = 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret
	if(tilt_pos <= MIN_TILT)
		ret = -1;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
	else
		tilt_pos--;
	return ret;
}
 12a:	08 95       	ret

0000012c <PanInc>:
//Description:	increases the pan PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int PanInc()
{
	int ret = 0;
	if(pan_pos >= MAX_PAN)
 12c:	80 91 02 01 	lds	r24, 0x0102
 130:	90 91 03 01 	lds	r25, 0x0103
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	8e 3a       	cpi	r24, 0xAE	; 174
 138:	92 07       	cpc	r25, r18
 13a:	40 f4       	brcc	.+16     	; 0x14c <PanInc+0x20>
		ret = -1;
	else
		pan_pos++;
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 03 01 	sts	0x0103, r25
 142:	80 93 02 01 	sts	0x0102, r24

//Description:	increases the pan PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int PanInc()
{
	int ret = 0;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	if(pan_pos >= MAX_PAN)
		ret = -1;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	9f ef       	ldi	r25, 0xFF	; 255
	else
		pan_pos++;
	return ret;
}
 150:	08 95       	ret

00000152 <PanDec>:
//Description:	decreases the pan PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int PanDec()
{
	int ret = 0;
	if(pan_pos <= MIN_PAN)
 152:	80 91 02 01 	lds	r24, 0x0102
 156:	90 91 03 01 	lds	r25, 0x0103
 15a:	80 3c       	cpi	r24, 0xC0	; 192
 15c:	91 05       	cpc	r25, r1
 15e:	40 f0       	brcs	.+16     	; 0x170 <PanDec+0x1e>
		ret = -1;
	else
		pan_pos++;
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 03 01 	sts	0x0103, r25
 166:	80 93 02 01 	sts	0x0102, r24

//Description:	decreases the pan PW by 1us down to 1ms
//Return:		error code of 0 for no error, -1 for limit reached
int PanDec()
{
	int ret = 0;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret
	if(pan_pos <= MIN_PAN)
		ret = -1;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
	else
		pan_pos++;
	return ret;
}
 174:	08 95       	ret

00000176 <LED_On>:

//Description:	Turns LED on
//Return:		error code of 0 for no error
int LED_On()
{
	PORTC |= (1<<PORTC7);
 176:	47 9a       	sbi	0x08, 7	; 8
	return 0;
}
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret

0000017e <LED_Off>:

//Description:	Turns LED off
//Return:		error code of 0 for no error
int LED_Off()
{
	PORTC = PORTC & ((1<<PORTC7) ^ 0xff);
 17e:	47 98       	cbi	0x08, 7	; 8
	return 0;
}
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret

00000186 <CameraAxisDecode>:
}

//Description:	changes the axises by one or maintains the axis and outputs a PW
//Return:		error code of 0 for no error
int CameraAxisDecode()
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <CameraAxisDecode+0x6>
 18c:	0f 92       	push	r0
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	//update LED
	volatile unsigned char code = 0;
 192:	19 82       	std	Y+1, r1	; 0x01
	code = PIND;
 194:	89 b1       	in	r24, 0x09	; 9
 196:	89 83       	std	Y+1, r24	; 0x01
	if(0x08 == (code & 0x08))
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	83 ff       	sbrs	r24, 3
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <CameraAxisDecode+0x1e>
	{
		LED_On();
 19e:	0e 94 bb 00 	call	0x176	; 0x176 <LED_On>
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <CameraAxisDecode+0x28>
	}		
	else if(0x00 == (code & 0x08))
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	83 fd       	sbrc	r24, 3
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <CameraAxisDecode+0x28>
	{
		LED_Off();
 1aa:	0e 94 bf 00 	call	0x17e	; 0x17e <LED_Off>
	}		
	//update tilt axis	
	if(0x30 == (code & 0x30))
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	80 73       	andi	r24, 0x30	; 48
 1b2:	80 33       	cpi	r24, 0x30	; 48
 1b4:	19 f4       	brne	.+6      	; 0x1bc <CameraAxisDecode+0x36>
	{
		TiltInc();
 1b6:	0e 94 71 00 	call	0xe2	; 0xe2 <TiltInc>
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <CameraAxisDecode+0x42>
	}	
	else if (0x20 == (code & 0x30))
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	80 73       	andi	r24, 0x30	; 48
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <CameraAxisDecode+0x42>
	{
		TiltDec();
 1c4:	0e 94 84 00 	call	0x108	; 0x108 <TiltDec>
	}	
	//update pan axis	
	if(0xC0 == (code & 0xC0))
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	80 7c       	andi	r24, 0xC0	; 192
 1cc:	80 3c       	cpi	r24, 0xC0	; 192
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <CameraAxisDecode+0x50>
	{
		PanInc();
 1d0:	0e 94 96 00 	call	0x12c	; 0x12c <PanInc>
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <CameraAxisDecode+0x5c>
	}	
	else if(0x80 == (code & 0xC0))
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	80 7c       	andi	r24, 0xC0	; 192
 1da:	80 38       	cpi	r24, 0x80	; 128
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <CameraAxisDecode+0x5c>
	{
		PanDec();
 1de:	0e 94 a9 00 	call	0x152	; 0x152 <PanDec>
	}	
	//make PW times
	//volatile unsigned int pan_count = pan_pos;
	//volatile unsigned int tilt_count = tilt_pos;
	volatile unsigned int delay = 440;
 1e2:	88 eb       	ldi	r24, 0xB8	; 184
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	9b 83       	std	Y+3, r25	; 0x03
 1e8:	8a 83       	std	Y+2, r24	; 0x02
	//Min PW for pan
	PORTC |= ((1<<0)|(1<<1));
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	83 60       	ori	r24, 0x03	; 3
 1ee:	88 b9       	out	0x08, r24	; 8
	//pan PWM
	while(delay--)
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	9b 81       	ldd	r25, Y+3	; 0x03
 1f4:	9c 01       	movw	r18, r24
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	30 40       	sbci	r19, 0x00	; 0
 1fa:	3b 83       	std	Y+3, r19	; 0x03
 1fc:	2a 83       	std	Y+2, r18	; 0x02
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	51 f0       	breq	.+20     	; 0x216 <CameraAxisDecode+0x90>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	00 00       	nop
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	9b 81       	ldd	r25, Y+3	; 0x03
 208:	9c 01       	movw	r18, r24
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	3b 83       	std	Y+3, r19	; 0x03
 210:	2a 83       	std	Y+2, r18	; 0x02
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	b1 f7       	brne	.-20     	; 0x202 <CameraAxisDecode+0x7c>
	{	
		_delay_us(1);
	}
	
	delay = 430;
 216:	8e ea       	ldi	r24, 0xAE	; 174
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	9b 83       	std	Y+3, r25	; 0x03
 21c:	8a 83       	std	Y+2, r24	; 0x02
	while(delay--)
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	9b 81       	ldd	r25, Y+3	; 0x03
 222:	9c 01       	movw	r18, r24
 224:	21 50       	subi	r18, 0x01	; 1
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	3b 83       	std	Y+3, r19	; 0x03
 22a:	2a 83       	std	Y+2, r18	; 0x02
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	f1 f0       	breq	.+60     	; 0x26c <CameraAxisDecode+0xe6>
	{
		if(pan_pos >= delay)
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	9b 81       	ldd	r25, Y+3	; 0x03
 234:	20 91 02 01 	lds	r18, 0x0102
 238:	30 91 03 01 	lds	r19, 0x0103
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	08 f0       	brcs	.+2      	; 0x244 <CameraAxisDecode+0xbe>
			PORTC &= ~(1<<0);
 242:	40 98       	cbi	0x08, 0	; 8
		if(tilt_pos >= delay)
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	20 91 00 01 	lds	r18, 0x0100
 24c:	30 91 01 01 	lds	r19, 0x0101
 250:	28 17       	cp	r18, r24
 252:	39 07       	cpc	r19, r25
 254:	08 f0       	brcs	.+2      	; 0x258 <CameraAxisDecode+0xd2>
			PORTC &= ~(1<<1);
 256:	41 98       	cbi	0x08, 1	; 8
 258:	00 00       	nop
	{	
		_delay_us(1);
	}
	
	delay = 430;
	while(delay--)
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	9b 81       	ldd	r25, Y+3	; 0x03
 25e:	9c 01       	movw	r18, r24
 260:	21 50       	subi	r18, 0x01	; 1
 262:	30 40       	sbci	r19, 0x00	; 0
 264:	3b 83       	std	Y+3, r19	; 0x03
 266:	2a 83       	std	Y+2, r18	; 0x02
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	11 f7       	brne	.-60     	; 0x230 <CameraAxisDecode+0xaa>
			PORTC &= ~(1<<0);
		if(tilt_pos >= delay)
			PORTC &= ~(1<<1);
		_delay_us(1);
	}
	PORTC &=~((1<<1)|(1<<0));
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	8c 7f       	andi	r24, 0xFC	; 252
 270:	88 b9       	out	0x08, r24	; 8
	
	return 0;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <GetTilt>:
//Description:	gets the current tilt position from 0 to 255
//Return:		tilt percentage
unsigned char GetTilt()
{
	return tilt_pos;
}
 282:	80 91 00 01 	lds	r24, 0x0100
 286:	08 95       	ret

00000288 <GetPan>:
//Description:	gets the current pan position from 0 to 255
//Return:		pan percentage
unsigned char GetPan()
{
	return pan_pos;
 288:	80 91 02 01 	lds	r24, 0x0102
 28c:	08 95       	ret

0000028e <main>:
#include "CameraAxis.h"
//#define F_CPU 16000000UL

int main(void)
{
	TreadAxisInit();
 28e:	0e 94 9e 01 	call	0x33c	; 0x33c <TreadAxisInit>
	CameraAxisInit();
 292:	0e 94 5d 00 	call	0xba	; 0xba <CameraAxisInit>
	
	DDRC = 0xff; //(1<<DDRC0)|(1<<DDRC1)|(1<<DDRC7);
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 29a:	18 b8       	out	0x08, r1	; 8
	int count;
    while(1)
    {
		TreadAxisDecode();
 29c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TreadAxisDecode>
		CameraAxisDecode();
 2a0:	0e 94 c3 00 	call	0x186	; 0x186 <CameraAxisDecode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	85 e7       	ldi	r24, 0x75	; 117
 2a6:	93 e9       	ldi	r25, 0x93	; 147
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x1a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x20>
 2ae:	00 00       	nop
 2b0:	f5 cf       	rjmp	.-22     	; 0x29c <main+0xe>

000002b2 <Forwards>:
//Description:	Drives motors forward
//Return:		error code of 0 for no error
int Forwards()
{
	//Drive Left Bank forwards
	PORTA = (1<<PORTA0)|(1<<PORTA1)|(1<<PORTA3);
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	82 b9       	out	0x02, r24	; 2
	//Drive Right Bank Forwards
	PORTB = (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB3);
 2b6:	85 b9       	out	0x05, r24	; 5
	return 0;
}
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	08 95       	ret

000002be <Backwards>:
//Description:	Drives motors backwards
//Return:		error code of 0 for no error
int Backwards()
{
	//Drive Left Bank backwards
	PORTA = (1<<PORTA0)|(1<<PORTA2)|(1<<PORTA4);
 2be:	85 e1       	ldi	r24, 0x15	; 21
 2c0:	82 b9       	out	0x02, r24	; 2
	//Drive Right Bank Backwards
	PORTB = (1<<PORTB0)|(1<<PORTB2)|(1<<PORTB4);
 2c2:	85 b9       	out	0x05, r24	; 5
	return 0;
}
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <Left>:
//Description:	Drives left bank forward and right bank backwards
//Return:		error code of 0 for no error
int Left()
{
	//Drive Left Bank forwards
	PORTA = (1<<PORTA0)|(1<<PORTA1)|(1<<PORTA3);
 2ca:	8b e0       	ldi	r24, 0x0B	; 11
 2cc:	82 b9       	out	0x02, r24	; 2
	//Drive Right Bank Backwards
	PORTB = (1<<PORTB0)|(1<<PORTB2)|(1<<PORTB4);
 2ce:	85 e1       	ldi	r24, 0x15	; 21
 2d0:	85 b9       	out	0x05, r24	; 5
	return 0;
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <Right>:
//Description:	Drives right bank forward and the left bank backwards
//Return:		error code of 0 for no error
int Right()
{
	//Drive Left Bank backwards
	PORTA = (1<<PORTA0)|(1<<PORTA2)|(1<<PORTA4);
 2d8:	85 e1       	ldi	r24, 0x15	; 21
 2da:	82 b9       	out	0x02, r24	; 2
	//Drive Right Bank Forwards
	PORTB = (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB3);
 2dc:	8b e0       	ldi	r24, 0x0B	; 11
 2de:	85 b9       	out	0x05, r24	; 5
	return 0;
}
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <Hold>:

//Description:	Disables all motors
//Return:		error code of 0 for no error
int Hold()
{
	PORTA = HALT;
 2e6:	12 b8       	out	0x02, r1	; 2
	PORTB = HALT;
 2e8:	15 b8       	out	0x05, r1	; 5
	return 0;
}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <TreadAxisDecode>:
//Description: Picks up code on PORTD and executes the function corresponding to the code
//Return:		error code of 0 for no error
int TreadAxisDecode()
{
	unsigned char cmd = 0;
	cmd = PIND;
 2f0:	89 b1       	in	r24, 0x09	; 9
	if(FORWARD == (cmd & TREAD_MASK))
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	90 70       	andi	r25, 0x00	; 0
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	19 f4       	brne	.+6      	; 0x304 <TreadAxisDecode+0x14>
		Forwards();
 2fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Forwards>
 302:	19 c0       	rjmp	.+50     	; 0x336 <TreadAxisDecode+0x46>
	else if(BACKWARD == (cmd & TREAD_MASK))
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	91 05       	cpc	r25, r1
 308:	19 f4       	brne	.+6      	; 0x310 <TreadAxisDecode+0x20>
		Backwards();
 30a:	0e 94 5f 01 	call	0x2be	; 0x2be <Backwards>
 30e:	13 c0       	rjmp	.+38     	; 0x336 <TreadAxisDecode+0x46>
	else if(LEFT == (cmd & TREAD_MASK))
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	91 05       	cpc	r25, r1
 314:	19 f4       	brne	.+6      	; 0x31c <TreadAxisDecode+0x2c>
		Left();
 316:	0e 94 65 01 	call	0x2ca	; 0x2ca <Left>
 31a:	0d c0       	rjmp	.+26     	; 0x336 <TreadAxisDecode+0x46>
	else if(RIGHT == (cmd & TREAD_MASK))
 31c:	84 30       	cpi	r24, 0x04	; 4
 31e:	91 05       	cpc	r25, r1
 320:	19 f4       	brne	.+6      	; 0x328 <TreadAxisDecode+0x38>
		Right();
 322:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Right>
 326:	07 c0       	rjmp	.+14     	; 0x336 <TreadAxisDecode+0x46>
	else if(HALT == (cmd & TREAD_MASK))
 328:	00 97       	sbiw	r24, 0x00	; 0
 32a:	19 f4       	brne	.+6      	; 0x332 <TreadAxisDecode+0x42>
		Hold();
 32c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Hold>
 330:	02 c0       	rjmp	.+4      	; 0x336 <TreadAxisDecode+0x46>
	else
		Hold();
 332:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Hold>
	return 0;
}
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret

0000033c <TreadAxisInit>:
//				PORTB set to outputs for Right Motor bank
//Return:		error code of 0 for no error
int TreadAxisInit()
{
	//set PORTD to inputs with no pullups
	PORTD = 0x00;
 33c:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0x00;
 33e:	1a b8       	out	0x0a, r1	; 10
	//set PORTA as outputs
	PORTA = HALT;
 340:	12 b8       	out	0x02, r1	; 2
	DDRA = (1<<DDRA0)|(1<<DDRA1)|(1<<DDRA2)|(1<<DDRA3)|(1<<DDRA4);
 342:	8f e1       	ldi	r24, 0x1F	; 31
 344:	81 b9       	out	0x01, r24	; 1
	//set PORTB as outputs
	PORTB = HALT;
 346:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDRB0)|(1<<DDRB1)|(1<<DDRB2)|(1<<DDRB3)|(1<<DDRB4);
 348:	84 b9       	out	0x04, r24	; 4
	return 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
